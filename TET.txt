import cv2
import numpy as np

image_path = 'c:/Users/OUSSAMA/Pictures/FF/top.jpeg'
template_path = 'c:/Users/OUSSAMA/Pictures/FF/idd.jpeg'
template_path1 = 'c:/Users/OUSSAMA/Pictures/FF/center.jpeg'

# Load the main image and the template images
image = cv2.imread(image_path)
template = cv2.imread(template_path, cv2.IMREAD_COLOR)
template1 = cv2.imread(template_path1, cv2.IMREAD_COLOR)

if image is None or template is None or template1 is None:
    print("Error: Unable to load image or template")
else:
    # Convert the template images to grayscale
    template_gray = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)
    template_gray1 = cv2.cvtColor(template1, cv2.COLOR_BGR2GRAY)

    # Use template matching to find the templates in the main image
    result = cv2.matchTemplate(cv2.cvtColor(image, cv2.COLOR_BGR2GRAY), template_gray, cv2.TM_CCOEFF_NORMED)
    result1 = cv2.matchTemplate(cv2.cvtColor(image, cv2.COLOR_BGR2GRAY), template_gray1, cv2.TM_CCOEFF_NORMED)
    
    # Set a lower threshold for the matching result
    threshold = 0.6
    loc = np.where(result >= threshold)
    loc1 = np.where(result1 >= threshold)

    # Create an empty list to store points and rectangles
    points = []
    rectangles = []

    # Iterate over the locations and create rectangles for the first template
    for pt in zip(*loc[::-1]):
        rectangles.append([pt[0], pt[1], pt[0] + template_gray.shape[1], pt[1] + template_gray.shape[0]])

    # Iterate over the locations and create points for the center of the second template
    for pt in zip(*loc1[::-1]):
        x, y, w, h = pt[0], pt[1], template_gray1.shape[1], template_gray1.shape[0]
        center_x, center_y = x + w // 2, y + h // 2
        points.append((center_x, center_y))

    # Convert the list of rectangles to a NumPy array
    rectangles = np.array(rectangles)

    # Draw rectangles around all matched locations for the first template
    for (x, y, w, h) in rectangles:
        cv2.rectangle(image, (x, y), (w, h), (0, 255, 0), 0)

    # Draw points for the center of the second template
    for center in points:
        cv2.circle(image, center, 1, (255, 0, 0), -1)

    # Add text annotation at the top of the image
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(image, f'Number of objects: {len(rectangles) + len(points)}', (50, 50), font, 1, (255, 255, 255), 2, cv2.LINE_AA)

    # Display the image with the rectangles drawn around the matched areas and the text annotation
    cv2.imshow('Matching Result', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
